# -*- coding: utf-8 -*-
"""multivariateLinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FQsYL3EHIblEteOUWqZdndcUu8r_IjWl

#### Import Statements
"""

from sklearn import datasets
from sklearn.datasets import load_diabetes
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error as mae
from sklearn.metrics import mean_squared_error as mse
import sklearn.metrics as sm
import numpy as np
import matplotlib.pyplot as plt
import operator

"""Load Data"""

# Load dataset
diab = load_diabetes()
x = diab.data
y = diab.target

y = np.expand_dims(y,1)

"""#### Display Feature Names"""

print(diab.feature_names)

"""#### Shuffle Dataset"""

# Create new dataset, target appended in last column
data = np.append(x, y, 1)

# Shuffle dataset
np.random.shuffle(data)

"""#### Train Dataset"""

# Number of samples
total_sample = len(data)

# Train/Dev/Test Splits
train_x = x[:int(total_sample*0.70)] # 70%
train_y = y[:int(total_sample*0.70)]

dev_x = x[int(total_sample*0.70):int(total_sample*0.85)] # 15%
dev_y = y[int(total_sample*0.70):int(total_sample*0.85)]

test_x = x[int(total_sample*0.85):] # 15%
test_y = y[int(total_sample*0.85):]

"""#### Multivariate Regression Model (From Scratch)

"""

# Shape x for multivariate reg
x = np.vstack((np.ones((x.shape[0], )), x.T)).T
test_x = np.vstack((np.ones((test_x.shape[0], )), test_x.T)).T

# Multivariate Linear Regression Function
def linear_reg(x, y, lr, iteration):
  m = y.size
  theta = np.zeros((x.shape[1], 1))
  cost_list = []

  for i in range(iteration):
    y_pred = np.dot(x, theta)
    cost = compute_cost(y_pred, y)
    theta = gradient(theta, x, y, y_pred, lr)
    cost_list.append(cost)

    if(i%(iteration/10) == 0):
      print("Cost is: ", cost)

  return theta, cost_list, y_pred

  # Cost Function
def compute_cost(y_pred, y_true):
  m = len(y_true)
  J = (1/(2*m))*np.sum(np.square(y_pred - y_true))
  return J

def gradient(theta, x, y_true, y_pred, lr):
  m = len(y_true)
  n_theta = (1/m)*np.dot(x.T, y_pred-y_true)
  temp_theta = theta - (lr*n_theta)
  return temp_theta

# Training Data
iteration = 1000
lr = .5
theta, cost_list, y_pred = linear_reg(train_x, train_y, lr, iteration)

# Dev Data
iteration = 1000
lr = .5
theta, cost_list, y_pred = linear_reg(dev_x, dev_y, lr, iteration)

# Test Data
iteration = 1000
lr = .5
theta, cost_list, y_pred = linear_reg(test_x, test_y, lr, iteration)

# Accuracy Rating
print("R2 Accuracy score is: ", round(sm.r2_score(test_y, y_pred), 2))

print("Mean squared error:{}" .format(mse(test_y, y_pred)))

"""#### Multivariate Regression Model (Using SciKit Learn)"""

# # Create model
# model = LinearRegression()

# # Fit model
# model.fit(train_x, train_y)

# # Predict y value
# y_pred = model.predict(test_x)
# # print(y_pred)

# # Prints the Accuracy Rating 
# print("R2 Accuracy score is: ", round(sm.r2_score(test_y, y_pred), 2))
# print(mse(train_y, y_pred), mae(train_y, y_pred))

# # Mean Squared Error
# print("Mean squared error:{}" .format(mse(test_y, y_pred)))